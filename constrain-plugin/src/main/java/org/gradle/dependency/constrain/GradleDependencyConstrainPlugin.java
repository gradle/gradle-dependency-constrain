/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gradle.dependency.constrain;

import java.io.File;
import javax.annotation.Nonnull;
import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.initialization.Settings;
import org.gradle.api.invocation.Gradle;
import org.gradle.dependency.constrain.lib.ConfigurationConstrainService;
import org.gradle.dependency.constrain.lib.ConstrainService;

/**
 * Plugin that applies dependency constraints to the build from an external configuration file.
 */
@SuppressWarnings("unused")
public abstract class GradleDependencyConstrainPlugin implements Plugin<Object> {

  private static String pluginApplicationTargetDisplayName(@Nonnull Object object) {
    if (object instanceof Project) {
      return "a project";
    } else if (object instanceof Settings) {
      return "settings";
    } else if (object instanceof Gradle) {
      return "init script";
    } else {
      return object.getClass().getName();
    }
  }

  public void apply(Object object) {
    if (object instanceof Settings) {
      doApply((Settings) object);
    } else {
      throw new GradleException(
          "The dependency constrain plugin must be applied to settings (was applied to "
              + pluginApplicationTargetDisplayName(object)
              + ")");
    }
  }

  private void doApply(Settings settings) {
    ConfigurationConstrainService constraintService =
        ConstrainService.Factory.loadAndCreate(new File(settings.getRootDir(), "/gradle"))
            .create(settings.getBuildscript().getDependencies().getConstraints()::create);
    settings
        .getGradle()
        .allprojects(
            project -> {
              constraintService.doConstrain(project.getBuildscript().getConfigurations());
              constraintService.doConstrain(project.getConfigurations());
            });
  }
}
