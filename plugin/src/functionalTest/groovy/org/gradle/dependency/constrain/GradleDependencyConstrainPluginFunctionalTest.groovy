/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.gradle.dependency.constrain

import org.gradle.testkit.runner.BuildResult
import org.intellij.lang.annotations.Language

import javax.annotation.Syntax
import java.nio.file.Files

/**
 * A simple functional test for the 'org.gradle.dependency.constrain.greeting' plugin.
 */
class GradleDependencyConstrainPluginFunctionalTest extends BaseFunctionalTest {

    @Language("xml")
    private static final String JUNIT_CONSTRAINTS = """<?xml version="1.0"?>
<constraints>
    <constraint>
        <group>junit</group>
        <name>junit</name>
        <suggested-version>4.13.1</suggested-version>
        <rejected>
            <reject>[4.7,4.13]</reject>
        </rejected>
        <because>CVE-2020-15250: TemporaryFolder on unix-like systems does not limit access to created files</because>
    </constraint>
</constraints>
    """.stripMargin()

    void applyConstraintsFile() {
        File gradleDirectory = new File(projectDir, "gradle")
        Files.createDirectories(gradleDirectory.toPath())
        writeString(new File(gradleDirectory, "constraints.xml"), JUNIT_CONSTRAINTS)
    }

    void "can constrain project dependencies"() {
        given:
        // Setup the test build
        applyConstraintsFile()
        applyConstraintPlugin()
        writeString(new File(projectDir, "build.gradle"), """
        plugins {
            id 'java-library'
        }

        repositories {
            // Use Maven Central for resolving dependencies.
            mavenCentral()
        }

        dependencies {
            testImplementation("junit:junit:4.12")
        }

        task resolve {
            inputs.files(configurations.testRuntimeClasspath)
            doLast {
                configurations.testRuntimeClasspath.files.name.each {
                    println(it)
                }
            }
        }
""".stripMargin())

        when:
        // Run the build
        BuildResult result = succeed("resolve")

        then:
        result.getOutput().contains("junit-4.13.1.jar")
    }

    void "can constrain buildscript dependencies"() {
        given:
        // Setup the test build
        applyConstraintsFile()
        applyConstraintPlugin()
        writeString(new File(projectDir, "build.gradle"), """
        buildscript {
            dependencies {
                classpath("junit:junit:4.12")
            }
        }
        plugins {
            id 'java-library'
        }

        repositories {
            // Use Maven Central for resolving dependencies.
            mavenCentral()
        }

        task resolve {
            inputs.files(buildscript.configurations.classpath)
            doLast {
                buildscript.configurations.classpath.files.name.each {
                    println(it)
                }
            }
        }
""".stripMargin())

        when:
        // Run the build
        BuildResult result = succeed("resolve")

        then:
        result.getOutput().contains("junit-4.13.1.jar")
    }

}
